import matplotlib.pyplot as plt
import numpy as np

from pylot.planning.frenet_optimal_trajectory.frenet_optimal_trajectory \
    import generate_target_course, frenet_optimal_planning


def main():
    """A debug script for the frenet optimal trajectory planner.

    This script will solve the frenet optimal trajectory problem in a
    standalone simulation and visualize the results or raise an error if a
    path is not found.

    To run, replace `conds = {}` with the corresponding output from the pylot
    debug logs. The output will be from the `fot_planning_operator` and it will
    look like `initial_conditions = {...}`.
    """
    print(__file__ + " start!!")
    sim_loop = 500
    area = 40.0  # animation area length [m]
    show_animation = True

    conds = {'s0': 12.59999999999999, 'c_speed': 7.10126796146418, 'c_d': 0.10761995326139745, 'c_d_d': 0.009671559894548877, 'c_d_dd': 0.0, 'wx': [132.6698760986328, 131.6698760986328, 130.6698760986328, 129.6698760986328, 128.6698760986328, 127.66987609863281, 126.66987609863281, 125.66987609863281, 124.66987609863281, 123.66987609863281, 122.66987609863281, 121.66987609863281, 120.66987609863281, 119.66987609863281, 118.66987609863281, 117.66987609863281, 116.66987609863281, 115.66987609863281, 114.66987609863281, 113.66987609863281, 112.66987609863281, 111.66987609863281, 110.66987609863281, 109.66987609863281, 108.66987609863281, 107.66987609863281, 106.66987609863281, 105.66987609863281, 104.66987609863281, 103.66987609863281, 102.66987609863281, 101.42509460449219, 101.42509460449219, 100.42509460449219, 99.42509460449219, 98.55232238769531, 97.7652816772461, 96.99189758300781, 96.240478515625, 95.51909637451172, 94.83549499511719, 94.20539855957031, 93.68992614746094, 93.25005340576172, 92.894775390625, 92.63137817382812, 92.46527099609375, 92.39984130859375, 92.39868927001953, 92.3985366821289, 92.39832305908203, 92.39832305908203, 92.39817810058594, 92.39802551269531, 92.39787292480469, 92.39772033691406, 92.39756774902344, 92.39741516113281, 92.39726257324219, 92.39710998535156, 92.39695739746094, 92.39680480957031, 92.39665222167969, 92.39649963378906, 92.39634704589844, 92.39619445800781, 92.39604949951172, 92.3958969116211, 92.39574432373047, 92.39559173583984, 92.39543914794922, 92.3952865600586, 92.39513397216797, 92.39498138427734, 92.39482879638672, 92.3946762084961, 92.39452362060547, 92.39437103271484, 92.39421844482422, 92.39407348632812, 92.3939208984375, 92.39376831054688, 92.39361572265625, 92.39346313476562, 92.393310546875, 92.39315795898438, 92.39300537109375, 92.39285278320312, 92.3927001953125, 92.39254760742188, 92.39239501953125, 92.39224243164062, 92.39209747314453, 92.3919448852539, 92.39179229736328, 92.39156341552734, 92.39156341552734, 92.39141082763672, 92.3912582397461, 92.39110565185547], 'wy': [195.14341735839844, 195.14334106445312, 195.1432647705078, 195.14317321777344, 195.14309692382812, 195.1430206298828, 195.14292907714844, 195.14285278320312, 195.1427764892578, 195.14268493652344, 195.14260864257812, 195.1425323486328, 195.14244079589844, 195.14236450195312, 195.1422882080078, 195.1422119140625, 195.14212036132812, 195.1420440673828, 195.1419677734375, 195.14187622070312, 195.1417999267578, 195.1417236328125, 195.14163208007812, 195.1415557861328, 195.1414794921875, 195.14138793945312, 195.1413116455078, 195.1412353515625, 195.14114379882812, 195.1410675048828, 195.1409912109375, 195.14088439941406, 195.14088439941406, 195.14080810546875, 195.14071655273438, 195.12525939941406, 195.03407287597656, 194.86190795898438, 194.61065673828125, 194.28298950195312, 193.88241577148438, 193.41970825195312, 192.9273681640625, 192.36647033691406, 191.74850463867188, 191.08612060546875, 190.39292907714844, 189.68312072753906, 188.72335815429688, 187.72335815429688, 186.32492065429688, 186.32492065429688, 185.32492065429688, 184.32492065429688, 183.32492065429688, 182.32492065429688, 181.32492065429688, 180.32492065429688, 179.32492065429688, 178.32492065429688, 177.32492065429688, 176.32492065429688, 175.32492065429688, 174.32492065429688, 173.32492065429688, 172.32492065429688, 171.32492065429688, 170.32492065429688, 169.32492065429688, 168.32492065429688, 167.32492065429688, 166.32492065429688, 165.32492065429688, 164.32492065429688, 163.32492065429688, 162.32492065429688, 161.32492065429688, 160.32492065429688, 159.32492065429688, 158.32492065429688, 157.32492065429688, 156.32492065429688, 155.32492065429688, 154.32492065429688, 153.32492065429688, 152.32492065429688, 151.32492065429688, 150.32492065429688, 149.32492065429688, 148.32492065429688, 147.32492065429688, 146.32492065429688, 145.32492065429688, 144.32492065429688, 143.32492065429688, 141.83517456054688, 141.83517456054688, 140.83517456054688, 139.83517456054688, 138.83517456054688], 'obstacle_list': [[118.1975946369122, 198.9604864208016], [118.77855285374926, 198.93507372794826], [119.35951107058632, 198.90966103509496], [119.94046928742337, 198.88424834224162], [120.52142750426043, 198.85883564938828], [121.10238572109749, 198.83342295653497], [121.68334393793454, 198.80801026368164], [122.2643021547716, 198.78259757082833], [122.84526037160866, 198.757184877975], [123.4262185884457, 198.73177218512166]], 'x': 120.06613159179688, 'y': 195.03477478027344, 'vx': -7.101262092590332, 'vy': 0.009129776619374752}  # paste output from debug log

    # way points
    wx = conds['wx']
    wy = conds['wy']

    # initial conditions
    x = conds['x']
    y = conds['y']

    # obstacle lists
    ob = np.array(conds['obstacle_list'])

    # plot the environment
    plt.figure(figsize=(16, 16))
    plt.scatter(ob[:, 0], ob[:, 1], c='r', marker='x', label="Obstacles")
    plt.scatter(wx, wy, c='g', marker='.', label="Global Waypoints")
    plt.scatter(x, y, c='b', marker='o', label="Ego location")
    plt.xlim(x - area, x + area)
    plt.ylim(y - area, y + area)
    plt.xlabel("X axis")
    plt.ylabel("Y axis")
    plt.title("Initial environment")
    plt.figtext(0.2, 0.05,
                "Note: These are CARLA world coordinates and not true x, y"
                "space values. The resulting plots may be 'flipped'.",
                weight='extra bold',
                size='large')
    plt.legend()
    plt.show()

    tx, ty, tyaw, tc, csp = generate_target_course(wx, wy)

    # initial state
    c_speed = conds['c_speed']  # current speed [m/s]
    c_d = conds['c_d']  # current lateral position [m]
    c_d_d = conds['c_d_d']  # current lateral speed [m/s]
    c_d_dd = conds['c_d_dd']  # current latral acceleration [m/s]
    s0 = conds['s0']  # current course position


    for i in range(sim_loop):
        path = frenet_optimal_planning(
            csp, s0, c_speed, c_d, c_d_d, c_d_dd, ob, 10)
        assert path is not None, "Optimal trajectory not found."

        s0 = path.s[1]
        c_d = path.d[1]
        c_d_d = path.d_d[1]
        c_d_dd = path.d_dd[1]
        c_speed = path.s_d[1]

        if np.hypot(path.x[1] - tx[-1], path.y[1] - ty[-1]) <= 1.0:
            print("Goal")
            break

        if show_animation:  # pragma: no cover
            plt.cla()
            # for stopping simulation with the esc key.
            plt.gcf().canvas.mpl_connect(
                'key_release_event',
                lambda event: [exit(0) if event.key == 'escape' else None]
            )
            plt.plot(tx, ty)
            plt.plot(ob[:, 0], ob[:, 1], "xk")
            plt.plot(path.x[1:], path.y[1:], "-or")
            plt.plot(path.x[1], path.y[1], "vc")
            plt.xlim(path.x[1] - area, path.x[1] + area)
            plt.ylim(path.y[1] - area, path.y[1] + area)
            plt.xlabel("X axis")
            plt.ylabel("Y axis")
            plt.title("v[m/s]:" + str(c_speed)[0:4])
            plt.grid(True)
            plt.pause(0.001)

    print("Finish")
    if show_animation:  # pragma: no cover
        plt.grid(True)
        plt.pause(0.001)
        plt.show()


if __name__ == '__main__':
    main()
